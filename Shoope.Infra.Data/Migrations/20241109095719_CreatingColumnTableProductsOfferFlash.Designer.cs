// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Shoope.Infra.Data.Context;

#nullable disable

namespace Shoope.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241109095719_CreatingColumnTableProductsOfferFlash")]
    partial class CreatingColumnTableProductsOfferFlash
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Shoope.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("addres_id");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cep");

                    b.Property<string>("Complement")
                        .HasColumnType("text")
                        .HasColumnName("complement");

                    b.Property<byte>("DefaultAddress")
                        .HasColumnType("smallint")
                        .HasColumnName("default_address");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("neighborhood");

                    b.Property<string>("NumberHome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number_home");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("StateCity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state_city");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_address");

                    b.HasIndex("UserId");

                    b.ToTable("tb_address", (string)null);
                });

            modelBuilder.Entity("Shoope.Domain.Entities.Categories", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("categories_id");

                    b.Property<string>("AltValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alt_value");

                    b.Property<string>("ImgCategory")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("img_category");

                    b.Property<string>("ImgCategoryPublicId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("img_category_public_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("tb_categories", (string)null);
                });

            modelBuilder.Entity("Shoope.Domain.Entities.Cupon", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("cupons_id");

                    b.Property<DateTime?>("DateValidateCupon")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_validate_cupon");

                    b.Property<string>("FirstText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_text");

                    b.Property<int?>("QuantityCupons")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("quantity_cupons");

                    b.Property<string>("SecondImg")
                        .HasColumnType("text")
                        .HasColumnName("second_img");

                    b.Property<string>("SecondImgAlt")
                        .HasColumnType("text")
                        .HasColumnName("second_img_alt");

                    b.Property<string>("SecondText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("second_text");

                    b.Property<string>("ThirdText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("third_text");

                    b.Property<int?>("WhatCuponNumber")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("what_cupon_number");

                    b.HasKey("Id")
                        .HasName("pk_cupons");

                    b.ToTable("tb_cupons", (string)null);
                });

            modelBuilder.Entity("Shoope.Domain.Entities.ProductDiscoveriesOfDay", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("product_discoveries_of_days_id");

                    b.Property<int?>("DiscountPercentage")
                        .HasColumnType("integer")
                        .HasColumnName("discount_percentage");

                    b.Property<string>("ImgPartBottom")
                        .HasColumnType("text")
                        .HasColumnName("img_part_bottom");

                    b.Property<string>("ImgProduct")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("img_product");

                    b.Property<string>("ImgProductPublicId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("img_product_public_id");

                    b.Property<bool?>("IsAd")
                        .IsRequired()
                        .HasColumnType("boolean")
                        .HasColumnName("is_ad");

                    b.Property<double?>("Price")
                        .IsRequired()
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<double?>("QuantitySold")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity_sold");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_product_discoveries_of_days");

                    b.ToTable("tb_product_discoveries_of_days", (string)null);
                });

            modelBuilder.Entity("Shoope.Domain.Entities.ProductHighlight", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("product_highlights_id");

                    b.Property<string>("ImgProduct")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("img_product");

                    b.Property<string>("ImgProductPublicId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("img_product_public_id");

                    b.Property<string>("ImgTop")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("img_top");

                    b.Property<double?>("QuantitySold")
                        .IsRequired()
                        .HasColumnType("double precision")
                        .HasColumnName("quantity_sold");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_product_highlights");

                    b.ToTable("tb_product_highlights", (string)null);
                });

            modelBuilder.Entity("Shoope.Domain.Entities.ProductsOfferFlash", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("products_offer_flash_id");

                    b.Property<string>("AltValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alt_value");

                    b.Property<int?>("DiscountPercentage")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("discount_percentage");

                    b.Property<string>("HourFlashOffer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hour_flash_offer");

                    b.Property<string>("ImgPartBottom")
                        .HasColumnType("text")
                        .HasColumnName("img_part_bottom");

                    b.Property<string>("ImgProduct")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("img_product");

                    b.Property<string>("ImgProductPublicId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("img_product_public_id");

                    b.Property<int?>("PopularityPercentage")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("popularity_percentage");

                    b.Property<double?>("PriceProduct")
                        .IsRequired()
                        .HasColumnType("double precision")
                        .HasColumnName("price_product");

                    b.HasKey("Id")
                        .HasName("pk_products_offer_flash");

                    b.ToTable("tb_products_offer_flash", (string)null);
                });

            modelBuilder.Entity("Shoope.Domain.Entities.Promotion", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_id");

                    b.Property<string>("AltImgInnerFirst")
                        .HasColumnType("text")
                        .HasColumnName("alt_img_inner_first");

                    b.Property<string>("AltImgInnerSecond")
                        .HasColumnType("text")
                        .HasColumnName("alt_img_inner_second");

                    b.Property<string>("AltImgInnerThird")
                        .HasColumnType("text")
                        .HasColumnName("alt_img_inner_third");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("img");

                    b.Property<string>("ImgInnerFirst")
                        .HasColumnType("text")
                        .HasColumnName("img_inner_first");

                    b.Property<string>("ImgInnerFirstPublicId")
                        .HasColumnType("text")
                        .HasColumnName("img_inner_first_public_id");

                    b.Property<string>("ImgInnerSecond")
                        .HasColumnType("text")
                        .HasColumnName("img_inner_second");

                    b.Property<string>("ImgInnerSecondPublicId")
                        .HasColumnType("text")
                        .HasColumnName("img_inner_second_public_id");

                    b.Property<string>("ImgInnerThird")
                        .HasColumnType("text")
                        .HasColumnName("img_inner_third");

                    b.Property<string>("ImgInnerThirdPublicId")
                        .HasColumnType("text")
                        .HasColumnName("img_inner_third_public-id");

                    b.Property<string>("PublicIdImg")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("public_id_img");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("WhatIsThePromotion")
                        .HasColumnType("integer")
                        .HasColumnName("what_is_the_promotion");

                    b.HasKey("Id")
                        .HasName("pk_promotion");

                    b.ToTable("tb_promotion", (string)null);
                });

            modelBuilder.Entity("Shoope.Domain.Entities.PromotionUser", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_user_id");

                    b.Property<Guid?>("PromotionId")
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_promotion_user");

                    b.HasIndex("PromotionId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_promotion_user_user_id");

                    b.ToTable("tb_promotion_user", (string)null);
                });

            modelBuilder.Entity("Shoope.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("Cpf")
                        .HasColumnType("text")
                        .HasColumnName("cpf");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("tb_users", (string)null);
                });

            modelBuilder.Entity("Shoope.Domain.Entities.UserCupon", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_cupons_id");

                    b.Property<Guid?>("CuponId")
                        .HasColumnType("uuid")
                        .HasColumnName("cupon_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_cupons");

                    b.HasIndex("CuponId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_cupons_user_id");

                    b.ToTable("tb_user_cupons", (string)null);
                });

            modelBuilder.Entity("Shoope.Domain.Entities.Address", b =>
                {
                    b.HasOne("Shoope.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shoope.Domain.Entities.PromotionUser", b =>
                {
                    b.HasOne("Shoope.Domain.Entities.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId");

                    b.HasOne("Shoope.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Promotion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shoope.Domain.Entities.UserCupon", b =>
                {
                    b.HasOne("Shoope.Domain.Entities.Cupon", "Cupon")
                        .WithMany()
                        .HasForeignKey("CuponId");

                    b.HasOne("Shoope.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Cupon");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
